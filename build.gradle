//plugins {
//    id 'digital.wup.android-maven-publish' version '3.0.0' apply false
//}

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

subprojects {
    if (!it.name.contains('android')) {
        apply plugin: 'java'
        apply plugin: 'maven-publish'

        apply from: "$rootDir/gradle/quality.gradle"

        repositories {
            mavenCentral()
        }

        jar {
            manifest {
                attributes(
                        "Implementation-Title": project.name,
                        "Implementation-Version": VERSION_NAME
                )
            }
        }
    }

//    if(!it.name.startsWith('examples') && it.name.contains('android')) {
//        apply plugin: 'digital.wup.android-maven-publish'
//
//        publishing {
//            publications {
//                mavenAar(MavenPublication) {
//                    println components
//                    //from components.android
//                }
//            }
//        }
//    }

    if(!it.name.startsWith('examples') && !it.name.contains('android')) {
        apply plugin: 'maven'
        apply plugin: 'signing'

        publishing {
            task sourcesJar(type: Jar, dependsOn: classes) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }

            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }

            publications {
                maven(MavenPublication) {
                    groupId GROUP
                    version VERSION_NAME

                    artifact sourcesJar
                    artifact javadocJar
                    from components.java
                }
            }
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    pom.groupId = GROUP
                    pom.artifactId = POM_ARTIFACT_ID
                    pom.version = VERSION_NAME

                    repository(url: getReleaseRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
                    snapshotRepository(url: getSnapshotRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }

                    pom.project {
                        name POM_NAME
                        packaging POM_PACKAGING
                        description POM_DESCRIPTION
                        url POM_URL

                        scm {
                            url POM_SCM_URL
                            connection POM_SCM_CONNECTION
                            developerConnection POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name POM_LICENCE_NAME
                                url POM_LICENCE_URL
                                distribution POM_LICENCE_DIST
                            }
                        }

                        developers {
                            developer {
                                id POM_DEVELOPER_ID
                                name POM_DEVELOPER_NAME
                            }
                        }
                    }
                }
            }
        }

        signing {
            required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }
    }

    if (!it.name.contains('android')) {
        dependencies {
            testCompile group: 'junit', name: 'junit', version: '4.11'
            testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
            testCompile group: 'org.mockito', name: 'mockito-core', version: '2.10.0'
        }

        compileJava {
            sourceCompatibility = JavaVersion.VERSION_1_7
            targetCompatibility = JavaVersion.VERSION_1_7
            options.bootClasspath = "${System.env.JDK7_HOME}/jre/lib/rt.jar"
        }

        compileTestJava {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}
