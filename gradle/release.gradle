subprojects {
    if (!it.project.parent.name.equals("examples") &&
            !it.name.contains('android') &&
            !it.name.contains('examples')) {

        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        signing {
            required true
            sign configurations.archives
        }

        // pom file name
        ext {
            pomFile = file("${project.buildDir}/generated-pom.xml")
        }



        publishing {
            task sourcesJar(type: Jar, dependsOn: classes) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }

            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }

            publications {
                jar(MavenPublication) {
                    groupId GROUP
                    version VERSION_NAME

                    artifact sourcesJar
                    artifact javadocJar
                    from components.java

                    pom.withXml {
                        asNode().children().last() + {
                            resolveStrategy = Closure.DELEGATE_FIRST
                            name POM_NAME
                            description POM_DESCRIPTION
                            url POM_URL
                            scm {
                                url POM_SCM_URL
                                connection POM_SCM_CONNECTION
                                developerConnection POM_SCM_DEV_CONNECTION
                            }
                            licenses {
                                license {
                                    name POM_LICENCE_NAME
                                    url POM_LICENCE_URL
                                    distribution POM_LICENCE_DIST
                                }
                            }
                            developers {
                                developer {
                                    id POM_DEVELOPER_ID
                                    name POM_DEVELOPER_NAME
                                }
                            }
                        }
                    }

                    // Sign the pom.xml and artifacts.
                    if (signing.required) {
                        // Sign the pom.xml.
                        pom.withXml {
                            writeTo(project.ext.pomFile)
                            def pomAscFile = signing.sign(project.ext.pomFile).signatureFiles[0]
                            artifact(pomAscFile) {
                                classifier = null
                                extension = 'pom.asc'
                            }
                            project.ext.pomFile.delete()
                        }

                        // Sign the artifacts.
                        project.tasks.signArchives.signatureFiles.each {
                            artifact(it) {
                                def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                                if (matcher.find()) {
                                    classifier = matcher.group(1)
                                } else {
                                    classifier = null
                                }
                                extension = 'jar.asc'
                            }
                        }
                    }

                    repositories {
                        def repoUrl = ""
                        if (isReleaseBuild()) {
                            repoUrl = getReleaseRepositoryUrl()
                        } else {
                            repoUrl = getSnapshotRepositoryUrl()
                        }
                        maven {
                            url repoUrl
                        }
                    }
                }
            }
        }

        model {
            tasks.publishJarPublicationToMavenLocal {
                dependsOn(project.tasks.signArchives)
            }
            tasks.publishJarPublicationToMavenRepository {
                dependsOn(project.tasks.signArchives)
            }
        }
    }
}

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}